plugins {
    id 'com.github.jk1.dependency-license-report' version '1.13'
    id "io.codearte.nexus-staging" version "0.30.0"
}

def jacocoVersion = "0.8.6"

apply plugin: 'io.codearte.nexus-staging'

ext {
    /*
    module stuff
     */
    driver_ui = project(':driver-ui')
    driver_ui_desktop = project(':driver-ui-desktop')
    core = project(':core')
//    report = project(':report')

    seleniumVersion = '3.141.59'
    guavaVersion = "28.1-jre"

    moduleVersion = '2-SNAPSHOT'
    if (System.properties.containsKey('ttVersion')) {
        moduleVersion = System.getProperty('ttVersion')
    }
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'project-report'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

subprojects {

    group 'io.testerra'
    version moduleVersion
    archivesBaseName = "testerra"

    apply plugin: 'maven-publish' // tasks publish and publishToMavenLocal
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    // important!
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    test {

        ignoreFailures = true
        useTestNG()
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        options {
            systemProperties(System.getProperties())
        }

        jacoco {
            enabled = System.properties.containsKey("withJacoco")
            //excludes = ['jdk.internal.*']
        }
    }

    task cleanDist {
        doLast {
            delete "out"
        }
    }

    tasks.whenTaskAdded { t ->
        if (t.name.startsWith("publish")) {
            boolean e = t.project.publish.enabled
            if (!e) {
                println "Not running publish for " + t.project.name
                t.enabled = false
            }
        }
    }

    clean.dependsOn(cleanDist)

}

// Do not move this integration because `group` and `version` is needed for publishing
apply from: rootProject.file('publish.gradle')

task jacocoAggregateReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {

    additionalSourceDirs(files(subprojects.sourceSets.main.allSource.srcDirs))

    def srcdirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    def classdirs = files(subprojects.sourceSets.main.output)
    sourceDirectories.setFrom(srcdirs)
    classDirectories.setFrom(classdirs)

    executionData(project.fileTree(dir: '.', include: '**/build/jacoco/test.exec'))

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }

    doFirst {
        executionData(files(executionData.findAll {
            it.exists()
        }))
    }
}
